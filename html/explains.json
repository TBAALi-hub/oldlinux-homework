{
  "linux0_11":{"folder":true,"brief":"linux 0.11源码", "detailed":"linux 操作系统依赖于以下五个重要支柱: UNIX操作系统、MINIX操作系统、GNU计划、POSIX标准和Internet网络。"},
  "boot":{"folder": true,"brief":"linux开机引导部分", "detailed":"三个汇编程序完成了把内核从块设备加载到内存的工作，并对系统配置参数进行探测，完成了32位保护模式运行之前的所有工作。为内核系统执行进一步的初始化工作做好了准备。"},
  "fs":{"folder": true,"brief":"文件系统部分","detailed":"文件系统部分"},
  "include":{"folder": true,"brief":"源码引用的头文件","detailed":"内核所用到的头文件都保存在include目录下"},
  "asm":{"folder": true,"brief":"引用头文件汇编部分","detailed":"存放与计算机体系结构密切相关的函数申明或数据结构的头文件"},
  "linux":{"folder": true,"brief":"Liunx内核程序使用的一些头文件","detailed":"Linux内核使用的头文件"},
  "init":{"folder": true,"brief":"c语言初始化部分","detailed":"完成系统所有初始化工作后，创建了用于shell的进程。"},
  "kernel":{"folder": true,"brief":"内核部分","detailed":"内核部分"},
  "blk_drv":{"folder": true,"brief":"块设备驱动程序","detailed":"主要含有硬盘、软盘等块设备的驱动程序，主要用来与文件系统和告诉缓冲区打交道，含有较多与硬件相关的内容。"},
  "chr_drv":{"folder": true,"brief":"字符设备驱动程序","detailed":"设计串行线路驱动程序、键盘驱动程序和显示器驱动程序，这些驱动程序构成了0.11内核支持的串行中断和控制台终端设备。"},
  "math":{"folder": true,"brief":"数学协处理器(未实现)","detailed":"数学协处理器仿真程序，在0.11版本内核中未实现"},
  "lib":{"folder": true,"brief":"运行时库函数","detailed":"库函数文件主要向编译系统等系统程序提供了接口函数。"},
  "bootsect_s":{"src":"0.11/boot/bootsect.s","brief":"磁盘引导块程序","detailed":"编译后在磁盘第一个扇区，在ROM BIOS自检后，将被BIOS加载到0x7C00处执行。"},
  "head_s":{"src":"0.11/boot/head.s","brief":"引导部分","detailed":"从head.s程序起，系统开始正式在保护模式下运行。主要进行硬件设备的探测设置和内存管理页面的初始设置操作。"},
  "setup_s":{"src":"0.11/boot/setup.s","brief":"引导部分","detailed":"主要用于读取机器的硬件配置参数，并把内核模块system移动到适当的内存位置处。"},
  "bitmap_c":{"src":"0.11/fs/bitmap.c","brief":"引导部分","detailed":"包括对i节点位图和逻辑块位图进行释放和占用处理函数。操作i节点位图的函数是free_inode()和new_inode()，操作逻辑块位图的函数是free_block()和new_block()"},
  "block_dev_c":{"src":"0.11/fs/block_dev.c","brief":"包含块数据读和写函数","detailed":"包括block_read()和block_write()两个块设备读写函数。这两个函数是供系统调用函数read()和write()调用的，其他地方没有引用。"},
  "buffer_c":{"src":"0.11/fs/buffer.c","brief":"管理高速缓冲区","detailed":"主要实现对硬盘灯块设备进行数据高速存取的函数。"},
  "char_dev":{"src":"0.11/fs/char_dev.c","brief":"","detailed":""},
  "exec_c":{"src":"0.11/fs/exec.c","brief":"对二进制可执行文件和shell脚本文件加载与执行","detailed":"其中主要函数是do_execve(),它是系统终端调用(int 0x80)功能好_NR_execve()调用的C处理函数，是exec()函数簇的主要实现函数。"},
  "fcntl_c":{"src":"0.11/fs/fcntl.c","brief":"","detailed":"实现了文件控制系统调用fcntl()和两个文件句柄（描述符）复制系统调用dup()和dup2()。dup2()指定了新句柄的数值，而dup()则返回当前值最小的未用句柄。句柄复制操作主要用在文件的标准输入/输出重定向和管道操作方面。"},
  "file_dev":{"src":"0.11/fs/file_dev.c","brief":"访问文件数据","detailed":"访问文件数据，通过指定文件路径名方式进行操作。"},
  "file_table":{"src":"0.11/fs/file_table.c","brief":"","detailed":""},
  "inode_c":{"src":"0.11/fs/inode.c","brief":"","detailed":"包括分配i节点函数iget()和释放内存i节点存取函数iput()以及根据i节点信息取文件数据块在设备上对应的逻辑块好函数bmap()."},
  "ioctl_c":{"src":"0.11/fs/ioctl.c","brief":"","detailed":"主要"},
  "namei_c":{"src":"0.11/fs/namei.c","brief":"","detailed":"主要"},
  "open_c":{"src":"0.11/fs/open.c","brief":"","detailed":""},
  "pipe_c":{"src":"0.11/fs/pipe.c","brief":"管道操作","detailed":"包括管道文件读写操作函数read_pipe()和write_pipe(), 同时实现了管道调用系统sys_pipe()。这两个函数也是系统调用read()和write()低层实现函数，也仅在read_write.c中使用。"},
  "read_write_c":{"src":"0.11/fs/read_write.c","brief":"","detailed":""},
  "stat_c":{"src":"0.11/fs/stat.c","brief":"实现取文件状态信息调用","detailed":""},
  "super_c":{"src":"0.11/fs/super.c","brief":"文件系统超级块操作函数","detailed":"专门用于处理文件系统超级块，包括函数get_super(),put_super()"},
  "truncate_c":{"src":"0.11/fs/truncate.c","brief":"","detailed":""},
  "io_h":{"src":"0.11/include/asm/io_h","brief":"","detailed":""},
  "memory_h":{"src":"0.11/include/asm/memory.h","brief":"","detailed":""},
  "segment_h":{"src":"0.11/include/asm/segment.h","brief":"","detailed":""},
  "system_h":{"src":"0.11/include/asm/system.h","brief":"","detailed":""},
  "config_h":{"src":"0.11/include/linux/config.h","brief":"内核配置头文件","detailed":"内核配置头文件，定义使用的键盘语言类型和硬盘类型(HD_TYPE)可选项"},
  "fdreg_h":{"src":"0.11/include/linux/fdreg.h","brief":"描述软盘系统","detailed":"说明软盘系统常用到的一些参数以及所使用的I/O端口。软盘驱动器控制比较繁琐。"},
  "fs_h":{"src":"0.11/include/linux/fs.h","brief":"重要文件表结构定义","detailed":"重要文件表结构定义"},
  "hdreg_h":{"src":"0.11/include/linux/hdreg.h","brief":"硬盘控制器定义","detailed":"含有一些AT硬盘控制器的定义"},
  "head_h":{"src":"0.11/include/linux/head.h","brief":"定义Intel CPU描述符简单结构","detailed":"定义Intel CPU描述符的简单结构，和指定描述符的项号"},
  "kernel_h":{"src":"0.11/include/linux/kernel.h","brief":"定义了一些内核常用的函数原型","detailed":"定义了一些内核常用的函数原型"},
  "mm_h":{"src":"0.11/include/linux/mm.h","brief":"内存管理头文件","detailed":"主要定义了内存页面的大小和几个页面释放函数原型。"},
  "sched_h":{"src":"0.11/include/linux/sched.h","brief":"调度程序头文件","detailed":"调度程序头文件，定义了任务结构task_struct、初始任务0的数组，还有一些有关描述符参数设置和获取的嵌入式汇编函数宏语句。"},
  "sys_h":{"src":"0.11/include/linux/sys.h","brief":"内核中所有系统调用函数原型","detailed":"sys.h列出了内核中所有函数的原型，以及系统调用函数指针表。"},
  "tty_h":{"src":"0.11/include/linux/tty.h","brief":"终端数据结构和常量定义","detailed":"终端数据结构和常量定义"},
  "stat_h":{"src":"0.11/include/sys/stat.h","brief":"说明函数stat()返回的数据及其结构类型","detailed":"说明函数stat()返回的数据及其结构类型"},
  "times_h":{"src":"0.11/include/sys/times.h","brief":"文件访问与修改时间结构tms","detailed":"定义文件访问与修改时间结构tms，它将由times函数返回。"},
  "types_h":{"src":"0.11/include/sys/types.h","brief":"定义基本数据类型","detailed":"定义基本数据类型，所有类型定义为适当的数学类型长度。"},
  "utsname_h":{"src":"0.11/include/sys/utsname.h","brief":"系统名称结构头文件","detailed":"系统名称结构头文件"},
  "wait_h":{"src":"0.11/include/sys/wait.h","brief":"进程等待时信息","detailed":"包括一些符号常数和wait(), waitpid()函数原型申明。"},
  "a_out_h":{"src":"0.11/include/a.out.h","brief":"可执行文件格式","detailed":"Linux0.11仅支持a.out(Assembley out)执行文件格式, 描述了系统上可执行机器码文件。"},
  "const_h":{"src":"0.11/include/const.h","brief":"定义标志位常量符号","detailed":"该文件定义了i节点中文件属性类型和i_mode字段所用到的一些标志位常量符号。"},
  "ctype_h":{"src":"0.11/include/ctype.h","brief":"关于字符测试和处理的头文件","detailed":"定义了一些有关字符类型判断和转换的宏。当使用宏时，字符是作为一个表中的索引，从表中获取一个字节，于是可得到相关的比特位。"},
  "errno_h":{"src":"0.11/include/errno.h","brief":"定义Linux系统中的一些出错码（出错号）的常量符号","detailed":"定义Linux系统中的一些出错码（出错号）的常量符号"},
  "fcntl_h":{"src":"0.11/include/fcntl.h","brief":"文件控制选项头文件","detailed":"主要定义了函数fcntl()和open()中用到的一些选项"},
  "signal_h":{"src":"0.11/include/signal.h","brief":"实现POSIX.1要求20个信号","detailed":"通过向一个进程发送信号，我们可以控制进程执行状态（暂停、继续或终止）。本文件定义了内核中使用的所有信号的名称和基本操作函数。其中最为重要的函数是改变指定信号处理方式的函数signal()和sigaction()"},
  "stdarg_h":{"src":"0.11/include/stdarg.h","brief":"标准参数头文件","detailed":"以宏的形式定义变量参数列表。主要说明了-个类型(va_list)和三个宏(va_start, va_arg和va_end), 用于vsprintf, vprintf, vfprintf函数"},
  "stddef_h":{"src":"0.11/include/stddef.h","brief":"","detailed":""},
  "string_h":{"src":"0.11/include/string.h","brief":"字符串处理","detailed":"字符串处理，为了加速，用内嵌汇编实现"},
  "termios_h":{"src":"0.11/include/termios.h","brief":"","detailed":""},
  "time_h":{"src":"0.11/include/time.h","brief":"时间头文件","detailed":""},
  "unistd_h":{"src":"0.11/include/unistd.h","brief":"","detailed":""},
  "utime_h":{"src":"0.11/include/utime.h","brief":"","detailed":""},
  "main_c":{"src":"0.11/init/main.c","brief":"c语言程序入口","detailed":"c语言程序入口，用于引导系统"},
  "blk_h":{"src":"0.11/kernel/blk_drv/blk.h","brief":"","detailed":""},
  "floppy_c":{"src":"0.11/kernel/blk_drv/floppy.c","brief":"软盘驱动程序","detailed":"软盘驱动程序"},
  "hd_c":{"src":"0.11/kernel/blk_drv/hd.c","brief":"硬盘驱动程序","detailed":"硬盘驱动程序"},
  "ll_rw_blk_c":{"src":"0.11/kernel/blk_drv/ll_rw_blk.c","brief":"","detailed":""},
  "ramdisk_c":{"src":"0.11/kernel/blk_drv/ramdisk.c","brief":"虚拟内存盘","detailed":""},
  "console_c":{"src":"0.11/kernel/chr_drv/console.c","brief":"用于描述终端","detailed":""},
  "KB_s":{"src":"0.11/kernel/chr_drv/KB.s","brief":"键盘处理","detailed":""},
  "rs_io_s":{"src":"0.11/kernel/chr_drv/rs_io.s","brief":"","detailed":""},
  "serial_c":{"src":"0.11/kernel/chr_drv/serial.c","brief":"","detailed":""},
  "tty_io_c":{"src":"0.11/kernel/chr_drv/tty_io.c","brief":"","detailed":""},
  "tty_ioctl_c":{"src":"0.11/kernel/chr_drv/tty_ioctl.c","brief":"","detailed":""},
  "math_emulate":{"src":"0.11/kernel/math/math_emulate.c","brief":"数学协处理器","detailed":"数学协处理器，在linux0.11中未实现"},
  "asm_s":{"src":"0.11/kernel/asm.s","brief":"","detailed":""},
  "exit_c":{"src":"0.11/kernel/exit.c","brief":"","detailed":"描述了进程（任务）终止和退出的处理事宜。主要包含进程释放、会话（进程组）终止和程序退出处理函数以及杀死进程、终止进程、挂起进程等系统调用函数。还包括进程信号发送函数send_sig()和通知父进程子进程终止的函数tell_father()"},
  "fork_c":{"src":"0.11/kernel/fork.c","brief":"","detailed":"fork()系统调用用于创建子进程。Linux中所有进程都是进程0(任务0)的子进程。该程序是sys_fork()(在kernel/system_call.s中定义)系统调用的辅助处理函数集，给出了sys_fork()系统调用中使用的2个C语言函数。"},
  "mktime_c":{"src":"0.11/kernel/mktime.c","brief":"生成时间","detailed":"计算从1970年1月1日0时起，到开机当日经过的秒数，作为开机时间。"},
  "panic_c":{"src":"0.11/kernel/panic.c","brief":"","detailed":"当内核程序出错时，则调用函数panic()，显示错误信息并使系统进入死循环。在内核程序的许多地方，若出现严重出错时就要调用到该函数。"},
  "printk_c":{"src":"0.11/kernel/printk.c","brief":"打印函数","detailed":"内核中使用的打印(显示)函数, 功能与C标准函数库中的print相同。重新编写这么一个函数的原因是在内核中不能使用专用于用户模式的fs段寄存器，需要首先保存它。"},
  "sched_c":{"src":"0.11/kernel/sched.c","brief":"时间片调用","detailed":"内核中有关任务调度函数的程序，其中包括有关调度的基本函数(sleep_on, wakeup,schedule等)以及一些简单的系统调用函数。"},
  "signal_c":{"src":"0.11/kernel/signal.c","brief":"","detailed":"为了在信号处理程序结束后，恢复用户程序执行系统调用后的一些返回值和一些寄存器内容，并清除作为信号处理参数的信号值signr。"},
  "sys_c":{"src":"0.11/kernel/sys.c","brief":"","detailed":"sys.c程序包含很多系统调用功能的实现函数。其中，若返货值为_ENOSYS，则表示本版的Linux还没有实现该功能，可以参考目前的代码来了解它们的实现方法"},
  "system_call_s":{"src":"0.11/kernel/system_call.s","brief":"","detailed":"主要实现系统调用(system_call)中断int 0x80的入口处理过程以及信号检测处理，同时给出了2个系统功能的底层接口，分别是sys_execve和sys_fork"},
  "traps_c":{"src":"0.11/kernel/traps.c","brief":"","detailed":"主要包括一些在处理异常故障（硬件中断）的底层代码asm.s中调用的相应C函数。用于显示出错位置和出错号等调试信息。其中die()通用函数用于在中断处理中显示详细的出错信息。"},
  "vsprintf_c":{"src":"0.11/kernel/sched.c","brief":"","detailed":"主要包括vsprint()函数，用于对参数产生格式化。由于该函数是C函数库中的标准函数，基本没有设计内核工作原理。"},
  "_exit_c":{"src":"0.11/lib/_exit.c","brief":"程序调用内核的退出系统调用函数","detailed":"程序调用内核的退出系统函数。"},
  "close_c":{"src":"0.11/lib/_exit.c","brief":"关闭文件函数","detailed":"关闭文件函数"},
  "ctype_c":{"src":"0.11/lib/_exit.c","brief":"为ctype.h提供辅助结构数据","detailed":"为ctype.h提供辅助数组结构数据。"},
  "dup_c":{"src":"0.11/lib/_exit.c","brief":"创建文件描述符拷贝的函数dup()","detailed":"创建描述符拷贝的函数dup()"},
  "errno_c":{"src":"0.11/lib/_exit.c","brief":"定义出错变量号errno","detailed":"定义出错变量号errno, 用于在函数调用失败时存放出错号。"},
  "execve_c":{"src":"0.11/lib/_exit.c","brief":"运行执行程序的系统调用函数","detailed":"运行执行程序的系统调用函数。"},
  "malloc_c":{"src":"0.11/lib/_exit.c","brief":"内存分配函数malloc()","detailed":"使用存储桶的原理对分配的内存进行管理。"},
  "libopen_c":{"src":"0.11/lib/_exit.c","brief":"系统调用，将文件名转换成文件描述符","detailed":"open()系统调用用于将一个文件名转换成一个文件描述符。当调用成功时，返回的文件描述符将是进程没有打开的最小数值的描述符。该调用创建一个新的打开文件，并不与任何其他进程共享。"},
  "setsid_c":{"src":"0.11/lib/_exit.c","brief":"setsid()系统调用函数","detailed":"包括一个setsid()系统调用函数。如果调用的进程不是一个组的领导时，该函数用于创建一个新对话。"},
  "string_c":{"src":"0.11/lib/_exit.c","brief":"string.h","detailed":"所有字符串操作函数已经在string.h中实现, 因此string.c程序仅包含string.h头文件。"},
  "wait_c":{"src":"0.11/lib/_exit.c","brief":"","detailed":"允许进程获取与其子进程之一的状态信息。各种选项允许获取已经终止或停止的子进程状态信息。如果存在2个或2个以上子进程状态信息，则报告的顺序是不指定的。"},
  "write_c":{"src":"0.11/lib/_exit.c","brief":"","detailed":"向文件描述符指定的文件写入count字节的数据到缓冲区buf中。"}
}